import React, { useState, useRef, useEffect } from 'react'
import { HStack, VStack, Flex, useToast } from '@chakra-ui/react'
import Menu from '@components/Paint/Menu'
import Head from 'next/head'
import { useStorken } from '@data/storken'
import { useStorageUpload } from '@thirdweb-dev/react'
const Paint = () => {
  const canvasRef = useRef<any>(null)
  const ctxRef = useRef<any>(null)
  const [isDrawing, IsDrawing] = useStorken<boolean>('isDrawing')
  const [lineWidth, LineWidth] = useStorken<number>('lineWidth')
  const [lineColor, LineColor] = useStorken<string>('lineColor')
  const [lineOpacity, LineOpacity] = useStorken<number>('lineOpacity')
  const [penControl, PenControl] = useStorken<boolean>('penControl')
  const [file, setFile] = useState<any>()
  const { mutateAsync: upload } = useStorageUpload()
  const [metadata, Metadata] = useStorken<any>('metadata')

  const toast = useToast()
  // Initialization when the component
  // mounts for the first time
  useEffect(() => {
    const canvas = canvasRef.current
    const ctx = canvas.getContext('2d')
    ctx.lineCap = 'round'
    ctx.lineJoin = 'round'
    ctx.globalAlpha = lineOpacity
    ctx.strokeStyle = lineColor
    ctx.lineWidth = lineWidth
    ctxRef.current = ctx
  }, [lineColor, lineOpacity, lineWidth])

  // Function for starting the drawing
  const startDrawing = (e: any) => {
    ctxRef.current.beginPath()
    ctxRef.current.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY)
    IsDrawing.set(true)
  }

  // Function for ending the drawing
  const endDrawing = () => {
    ctxRef.current.closePath()
    IsDrawing.set(false)
  }
  const clear = () => {
    const canvas = document.getElementById('my-canvas') as HTMLCanvasElement
    const ctx: CanvasRenderingContext2D | null = canvas
      ? canvas.getContext('2d')
      : null
    if (ctx) {
      ctx.clearRect(0, 0, canvas.width, canvas.height)
    }
  }

  const draw = (e: any) => {
    if (!isDrawing) {
      return
    }
    ctxRef.current.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY)
    ctxRef.current.stroke()
  }
  const uploadToIpfs = async () => {
    const canvas = document.getElementById('my-canvas') as HTMLCanvasElement
    const dataURL = canvas.toDataURL()
    const data = dataURL.split(',')[1]
    const buffer = Buffer.from(data, 'base64')
    setFile(buffer)
    const uploadUrl = await upload({
      data: [file],
      options: { uploadWithGatewayUrl: true, uploadWithoutDirectory: true },
    })
    if (uploadUrl) {
      Metadata.set({ image: uploadUrl })
      toast({
        title: 'Please wait...',
        description: 'Your image uploading to IPFS',
        status: 'loading',
        duration: 9000,
        isClosable: true,
      })
    }
  }

  return (
    <>
      <Head>
        <title>YUZBIR / Market</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <VStack w={'100%'} justifyContent={'center'}>
        <HStack w={'100%'} justifyContent={'center'} display={'flex'} gap={10}>
          <Flex
            width="600px"
            height="720px"
            border={'2px solid #808080'}
            position="relative"
            bg="white"
          >
            <canvas
              id="my-canvas"
              onMouseDown={startDrawing}
              onMouseUp={endDrawing}
              onMouseMove={draw}
              ref={canvasRef}
              width={'600px'}
              height={'720px'}
            />
          </Flex>
          <Menu handleClick={uploadToIpfs} clearCanvas={clear} />
        </HStack>
      </VStack>
    </>
  )
}

export default Paint
